# imports
import random
import datetime
import telebot
import xlrd, xlwt
import pyowm
import openpyxl
import string
import json
import traceback
import translit
from telebot import types
# config
with open("config.json", 'r') as f:
    config = json.load(f)

classCells = string.ascii_uppercase[1:-6]

bot = telebot.TeleBot(config['token'])
owm = pyowm.OWM(config['owmtoken'], language = "ru")





observation = owm.weather_at_place('–¢—é–º–µ–Ω—å')
w = observation.get_weather()
t = w.get_temperature('celsius')["temp"]
t = int(t)
hums = w.get_humidity()




@bot.message_handler(commands=['lessons'])
def yroki(message):
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/5üéì")
    item2 = types.KeyboardButton("/6üìù")
    item3 = types.KeyboardButton("/7‚úèÔ∏è")
    item4 = types.KeyboardButton("/8üîî")
    item5 = types.KeyboardButton("/9üñá")
    item6 = types.KeyboardButton("/10üéí")
    item7 = types.KeyboardButton("/11üìö")

    markup.add(item1, item2, item3, item4, item5, item6, item7)

    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã —è –ø–æ–Ω—è–ª, –∫–∞–∫–∏–µ —É —Ç–µ–±—è —É—Ä–æ–∫–∏, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–ª–∞—Å—Å", parse_mode='html', reply_markup=markup)

@bot.message_handler(commands=['start'])
def welcome(message):
    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("/lessons üìñ")
    item2 = types.KeyboardButton("/temperature ")
    item3 = types.KeyboardButton("/help")

    markup.add(item1,item2)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>,  –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è —É—Ä–æ–∫–∏üß†.".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)
@bot.message_handler(commands=['help'])
def help(message):
        # keyboard
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("/lessons üìñ")
        item2 = types.KeyboardButton("/temp")
        item3 = types.KeyboardButton("/help")
        markup.add(item1,item2,item3)
        bot.send_message(message.chat.id,
                         "C–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥:\n /start-–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n /lessons-–≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å\n/t-—Ç–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è, —á—Ç–æ –Ω–∞–¥–µ—Ç—å ".format(
                             message.from_user, bot.get_me()),
                         parse_mode='html', reply_markup=markup)



@bot.message_handler(commands=['t'])
def temp(message):
        # keyboard
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

        bot.send_message(message.chat.id, "–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ —É–ª–∏—Ü–µ: " + str(t)+"¬∞")
        if t < 10:
            bot.send_message(message.chat.id, "–¢–µ–±–µ —Å—Ç–æ–∏—Ç –æ–¥–µ—Ç—å—Å—è —Ç–µ–ø–ª–æ, –Ω–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ")
        elif t < 14:
            bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω–µ  –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ, –Ω–æ –Ω–∞–¥–µ–Ω—å —á—Ç–æ-–Ω–∏–±—É–¥—å —Ç–µ–ø–ª–æ–µ")
        else:
            bot.send_message(message.chat.id, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–Ω–∞—è")

@bot.message_handler(commands=['lessonstom'])
def lessontommorow(message):
        # keyboard
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫")
        item2 = types.KeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫")
        item3 = types.KeyboardButton("–°—Ä–µ–¥–∞")
        item4 = types.KeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥")
        item5 = types.KeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞")
        markup.add(item1,item2,item3,item4,item5)
        bot.send_message(message.chat.id,
                         "–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏?".format(
                             message.from_user, bot.get_me()),
                         parse_mode='html', reply_markup=markup)







@bot.message_handler(content_types=['text'])
def klass (message):
    if message.chat.type == 'private':
        if message.text == '/5üéì':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("5–ê", callback_data='5A')
            item2 = types.InlineKeyboardButton("5–ë", callback_data='5B')
            item3 = types.InlineKeyboardButton("5–í", callback_data='5V')
            item4 = types.InlineKeyboardButton("5–ì", callback_data='5G')

            markup.add(item1, item2, item3, item4)

            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞', reply_markup=markup)

        elif message.text == '/6üìù':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("6–ê", callback_data='6A')
            item2 = types.InlineKeyboardButton("6–ë", callback_data='6B')
            item3 = types.InlineKeyboardButton("6–í", callback_data='6V')
            item4 = types.InlineKeyboardButton("6–ì", callback_data='6G')

            markup.add(item1, item2, item3, item4)

            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞', reply_markup=markup)

        elif message.text == '/7‚úèÔ∏è':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("7–ê", callback_data='7A')
            item2 = types.InlineKeyboardButton("7–ë", callback_data='7B')
            item3 = types.InlineKeyboardButton("7–í", callback_data='7V')
            item4 = types.InlineKeyboardButton("7–ì", callback_data='7G')

            markup.add(item1, item2, item3, item4)

            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞', reply_markup=markup)

        elif message.text == '/8üîî':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("8–ê", callback_data='8A')
            item2 = types.InlineKeyboardButton("8–ë", callback_data='8B')
            item3 = types.InlineKeyboardButton("8–í", callback_data='8V')


            markup.add(item1, item2, item3)

            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞', reply_markup=markup)


        elif message.text == '9üñá':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("9–ê", callback_data='9A')
            item2 = types.InlineKeyboardButton("9–ë", callback_data='9B')
            item3 = types.InlineKeyboardButton("9–í", callback_data='9V')
            item4 = types.InlineKeyboardButton("9–ì", callback_data='9G')

            markup.add(item1, item2, item3, item4)

            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞', reply_markup=markup)

        elif message.text == '/10':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("10–ê—Å–æ—Ü-–≥—É–º", callback_data='10S')
            item2 = types.InlineKeyboardButton("10—Ñ–∏–∑-–º–∞—Ç", callback_data='10F')
            item3 = types.InlineKeyboardButton("10–í", callback_data='10B')

            markup.add(item1, item2, item3)

            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –±—É–∫–≤—É –∫–ª–∞—Å—Å–∞', reply_markup=markup)


        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é, –Ω–∞–ø–∏—à–∏ /help')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            db = DataBase(config['days']['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'])
            s = ""
            for i, k  in enumerate(db.sheet[call.data].keys()): 
                s += f"{i+1} —É—Ä–æ–∫: {k}, –∫–∞–±–∏–Ω–µ—Ç: {db.sheet[call.data][k]}\n"
            bot.send_message(call.message.chat.id, s)

    except:
        traceback.print_exc()

class DataBase ( object ):
    def __scrapClasees(self): 
        for cell in classCells:
            className = self.activeSheet[cell + "1"].value
            className = translit.transliterate(className).upper()
            self.sheet[className] = {}
            for i in range(2, 15, 2):
                lesson = self.activeSheet[f"{cell}{i}"].value
                room = self.activeSheet[f"{cell}{i+1}"].value
                if (lesson != '\xa0'):
                    self.sheet[className][lesson] = room
    def __init__(self, dbname):
        self.database = openpyxl.load_workbook(dbname)
        self.sheetNames = self.database.sheetnames
        self.activeSheet = self.database.active
        self.sheet = {}
        self.__scrapClasees()

bot.polling(none_stop=True)
